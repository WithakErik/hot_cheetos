import * as React from "react";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";

import { deleteNote, getNotes, saveNote } from "./requests";
type TNote = {
  id: string;
  body: string;
  title: string;
};

const Home: NextPage = () => {
  const [notes, setNotes] = React.useState<TNote[] | []>([
    { id: "asdkfj232", title: "test", body: "ajdslfadsj" },
  ]);
  const [editingNoteId, setEditingNoteId] = React.useState("");
  const [noteTitle, setNoteTitle] = React.useState("");
  const [isAddingNewNote, setIsAddingNewNote] = React.useState(false);
  const [noteBody, setNoteBody] = React.useState("");

  React.useEffect(() => {
    (async () => {
      try {
        const getNotesResponse = await getNotes();
        if (getNotesResponse) {
          setNotes(getNotesResponse);
        }
      } catch (err) {
        console.error(err);
      }
    })();
  }, []);

  const handleSave = async () => {
    console.log(noteBody, noteTitle);
    try {
      const postNoteResponse = await saveNote({
        id: editingNoteId,
        body: noteBody,
        title: noteTitle,
      });
      if (postNoteResponse) {
        setNotes(postNoteResponse);
      }
    } catch (err) {
      console.error(err);
    }
  };
  const handleDelete = async (id: string) => {
    try {
      const deleteNoteResponse = await deleteNote(id);
      if (deleteNoteResponse) {
        setNotes(deleteNoteResponse);
      }
    } catch (err) {
      console.error(err);
    }
  };
  const resetEditing = async () => {
    setEditingNoteId("");
    setNoteTitle("");
    setNoteBody("");
  };

  const renderNote = (note: TNote) =>
    editingNoteId === note.id ? (
      <div
        className={styles.card}
        key={note.id}
        style={{
          background: "yellow",
          border: "3px groove red",
          width: "100%",
        }}
      >
        <div>
          <input
            onChange={(e) => setNoteTitle(e.target.value)}
            placeholder={note.title}
            style={{ width: "100%" }}
            type="text"
          />
          <input
            onChange={(e) => setNoteBody(e.target.value)}
            placeholder={note.body}
            style={{ width: "100%" }}
            type="text"
          />
        </div>
        <div>
          <button
            onClick={handleSave}
            style={{ background: "green", color: "white", width: "50%" }}
          >
            Save
          </button>
          <button
            onClick={resetEditing}
            style={{ background: "pink", color: "black", width: "50%" }}
          >
            Cancel
          </button>
        </div>
      </div>
    ) : (
      <div
        className={styles.card}
        key={note.id}
        style={{
          width: "100%",
        }}
      >
        <div>
          <h4>{note.title}</h4>
          <p>{note.body}</p>
        </div>
        <div>
          <button
            onClick={() => handleDelete(note.id)}
            style={{ background: "red", color: "white", width: "50%" }}
          >
            Delete
          </button>
          <button
            onClick={() => setEditingNoteId(note.id)}
            style={{ background: "blue", color: "white", width: "50%" }}
          >
            Edit
          </button>
        </div>
      </div>
    );

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Noteville!</h1>

        <p className={styles.description}>Get started by adding a note!</p>

        <button
          onClick={() => {
            resetEditing();
            setIsAddingNewNote(true);
          }}
        >
          New Note
        </button>
        {isAddingNewNote && (
          <div>
            <b>Title: </b>
            <input onChange={(e) => setNoteTitle(e.target.value)} />
            <b>Body: </b>
            <input onChange={(e) => setNoteBody(e.target.value)} />
            <button
              style={{ width: "100%", background: "green", color: "white" }}
            >
              Save
            </button>
          </div>
        )}
        <div className={styles.grid}>
          {notes && notes.map((note) => renderNote(note))}
        </div>
      </main>

      <footer className={styles.footer}>
        Powered by{" "}
        <a
          href="https://www.bobblebeans.com"
          target="_blank"
          rel="noopener noreferrer"
        >
          Bobblebeans
        </a>
      </footer>
    </div>
  );
};

export default Home;
